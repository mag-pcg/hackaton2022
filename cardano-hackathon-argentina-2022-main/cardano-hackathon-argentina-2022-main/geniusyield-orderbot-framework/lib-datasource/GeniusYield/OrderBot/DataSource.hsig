{- |
Module: GeniusYield.OrderBot.DataSource
Synopsis: The data source interface for getting information on orders and liquidity positions.
Description: These are the types and queries that should be necessary to establish connection
to a _data source_ and fetch information on DEX orders and liquidity positions.
-}
signature GeniusYield.OrderBot.DataSource (
    Connection,
    connectDB,
    closeDB,
    withEachAssetOrders,
    queryLiquidityPositions,
) where

import           Prelude                    (IO, Bool)

import           GeniusYield.Types          (GYNetworkId, GYProviders, GYAssetClass)
import           GeniusYield.OrderBot.Types (OrderAssetPair, OrderInfo, LiquidityPositionInfo, OrderType (BuyOrder, SellOrder))

-- | Means to connect to a data source for orders/liquidity positions.
data Connection

{- | Given a path to the expected config file, connect to a data source serving information about
GY DEX orders on the blockchain.
-}
connectDB :: GYNetworkId -> GYProviders -> IO Connection

-- | Close the DB connection.
closeDB :: Connection -> IO ()

{- | Fetch all unique DEX order asset pairings, and for each such asset pair, fetch all buy and sell orders.

Optionally takes a filter for asset classes. Only orders operating on assets with an asset class which satisfies
given filtering function, are retrieved. This can increase throughput when utilize effectively.

The distinction between "buy" and "sell" is further explained in "GeniusYield.OrderBot.Types.OrderInfo"
and "GeniusYield.OrderBot.Types.OrderAssetPair".

Fetched information is fed into given accumulator function one by one, in no particular order. The accumulator
function's results will be accumulated, starting with the given accumulator, and returned wrapped within an
IO action.
-}
withEachAssetOrders :: Connection
                    -> (GYAssetClass -> Bool)
                    -> (a -> (# OrderAssetPair, [OrderInfo 'BuyOrder], [OrderInfo 'SellOrder] #) -> a)
                    -> a
                    -> IO a

{- | Fetch all liquidity positions within the DEX.

Similar to 'withEachAssetOrders', this can also take filter pools using given filtering function,
based on __either the pool tokens__. That is, if either of the tokens in the pool satisfy the
filtering function, it'll be fetched.

It is the orderbook population function's job to meaningfully separate these into common
asset pairs.
-}
queryLiquidityPositions :: Connection -> (GYAssetClass -> Bool) -> IO [LiquidityPositionInfo]
